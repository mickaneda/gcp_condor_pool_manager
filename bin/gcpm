#!/usr/bin/env bash

# Config file
CONFIG_DIR="${HOME}/.config/gcp_condor_pool_manager"
CONFIG_FILE="${CONFIG_DIR}/config"
WN_LIST="${CONFIG_DIR}/wn_list"
STARTUP_PREFIX="${CONFIG_DIR}/startup"

# Default parameters
max=(10)
max_cores=0 # Set non-zero if you want to limit in total number of cores in addition to max for each
prefix="gcep-wn"
core=(1)
mem=(3750)
image=()
preemptible=0
off_timer=0
zones="" # e.g. asia-northeast1-b
tag="" # e.g. allow-head
reuse=0 
interval=10
head_info=gcp
bucket="" # e.g. gs://gcpm-condor (must be unique in entire GCP)
admin="" # e.g. admin@example.com
owner="" # e.g. CondorOwner

params=(max max_cores prefix core mem image preemptible off_timer zones tag reuse interval head_info bucket admin owner)
params_no_empty=(max_cores prefix core mem image head_info bucket admin owner)

# Other variables
pool_password=""
edit=0

# HELP
HELP=$(cat << EOF
Usage: gcpm [-h] [-f <config file>] [-p <pool_passwrd file>] [-e]
   -p  <pool_password_file>   Pool file management
   -f  <config file>          Set config file
   -e                         Edit config file
   -h                         print this help
EOF
)

# Check arguments
while [ $# -gt 0 ];do
  if [ "$1" = "-h" ];then
    echo "$HELP"
    exit
  elif [ "$1" = "-f" ];then
    shift
    CONFIG_FILE="$1"
  elif [ "$1" = "-p" ];then
    shift
    pool_password="$1"
    if [ -z "$pool_password" ];then
      echo "pool_password file is empty"
      exit 1
    fi
  elif [ "$1" = "-e" ];then
    edit=1
  else
    echo "Unknown arguments: $*"
    echo ""
    echo "$HELP"
    exit 1
  fi
  shift
done

if [ "$edit" -eq 1 ];then
  ${EDITOR:-vi} "$CONFIG_FILE"
  exit $?
fi

# Check gcloud utils
if ! type gcloud >& /dev/null;then
  echo "gcloud tools are not installed, do you want to install?"
  while : ;do
    echo "$message [y/n]: " >/dev/tty
    read -srn 1 ans </dev/tty
    if [ "$ans" = "y" ];then
      curl https://sdk.cloud.google.com | bash
      break
    elif [ "$_s_read" = "n" ];then
      echo "Intall gcloud: https://cloud.google.com/sdk/install"
      exit 1
    fi
  done
fi

# Functions: Show setup
show_setup () {
  echo ""
  echo "================================================================================"
  echo "$(date): parameters updated"
  echo "Configuration file: $CONFIG_FILE"
  for p in ${params[@]};do
    eval "echo \$p = \${$p[@]}"
  done
  echo "================================================================================"
  echo ""
}

# Functions: Read config function
check_var () {
  local name="$1"
  local var="$2"
  local is_num="${3:-0}"
  local no_empty="${4:-0}"
  local array="${4:-0}"
  if [ $array -eq 1 ];then
    var=(${var//,/ })
  else
    var=($var)
  fi
  if [ "${var[*]}" = "$(eval "echo \${$name[*]}")" ];then
    return 0
  fi

  if [ $is_num -eq 1 ];then
    for v in ${var[@]};do
      if ! ((n+1)) 2>&1;then
        echo "ERROR: $v must be number, $1 is not allowed for $name. Check your configuration file."
        exit 1
      fi
    done
  fi

  if [ $no_empty -eq 1 ];then
    for v in ${var[@]};do
      if [ -z "$v" ];then
        echo "ERROR: $name must not be empty. Check your configuration file."
        exit 1
      fi
    done
  fi

  if [ $array -eq 1 ];then
    eval "$name=(${var[@]})"
  else
    eval "$name=${var[0]}"
  fi
  is_updated=1

  return 0
}

make_startup () {
  # Make startup script

  local i=0
  for((i=0;i<${#core[@]};i++));do
    cat << EOF > "${STARTUP_PREFIX}-${core[$i]}core.sh"
#/bin/bash
sed -i"" 's/FIXME_ADMIN/${admin}/' /etc/condor/config.d/00_config_local.config

sed -i"" 's/FIXME_HOST/${head}/' /etc/condor/config.d/10_security.config
sed -i"" 's/FIXME_DOMAIN/${domain}/' /etc/condor/config.d/10_security.config

sed -i"" "s/FIXME_PRIVATE_DOMAIN/\${hostname -d}/" /etc/condor/config.d/10_security.config

sed -i"" 's/FIXME_OWNER/${owner}/' /etc/condor/config.d/20_workernode.config
sed -i"" 's/FIXME_CORE/${core[$i]}/' /etc/condor/config.d/20_workernode.config
sed -i"" 's/FIXME_MEM/${mem[$i]}/' /etc/condor/config.d/20_workernode.config

gsutil cp "${bucket}/pool_password" /etc/condor/
chmod 600 /etc/condor/pool_password
systemctl enable condor
systemctl start condor
while :;do
  condor_reconfig
  status="\$(condor_status | grep "\${HOSTNAME}")"
  if [ -n "\$status" ];then
    break
  fi
  sleep 10
done
date > /root/condor_started
EOF
    if [ $off_timer -ne 0 ];then
      cat << EOF >> "${STARTUP_PREFIX}-${core[$i]}core.sh"
sleep $off_timer
condor_off -peaceful -startd
date > /root/condor_off
EOF
    fi
  done
}

read_config () {
  if [ -f "$CONFIG_FILE" ];then
    is_updated=0
    local name
    local var
    while read -r name var;do
      if [ "$name" = "max" ];then
        check_var max "$var" 1 1 1
      elif [ "$name" = "max_cores" ];then
        check_var max_cores "$var" 1 1
      elif [ "$name" = "prefix" ];then
        check_var prefix "$var" 0 1
      elif [ "$name" = "core" ];then
        check_var core "$var" 1 1 1
      elif [ "$name" = "mem" ];then
        check_var mem "$var" 1 1 1
      elif [ "$name" = "image" ];then
        check_var image "$var" 0 1 1
      elif [ "$name" = "preemptible" ];then
        check_var preemptible "$var" 1 1
      elif [ "$name" = "off_timer" ];then
        check_var off_timer "$var" 1 1
      elif [ "$name" = "zones" ];then
        check_var zones "$var" 0 0
        zones=$(echo "$var"|tr , ' ')
      elif [ "$name" = "tag" ];then
        check_var tag "$var" 0 0
      elif [ "$name" = "reuse" ];then
        check_var reuse "$var" 1 1
      elif [ "$name" = "interval" ];then
        check_var name "$var" 1 1
      elif [ "$name" = "head_info" ];then
        check_var head_info "$var" 0 1
      elif [ "$name" = "bucket" ];then
        check_var bucket "$var" 0 1
      elif [ "$name" = "admin" ];then
        check_var admin "$var" 0 1
      elif [ "$name" = "owner" ];then
        check_var owner "$var" 0 1
      fi
    done < "$CONFIG_FILE"
  else
    echo "Configuration file:$CONFIG_FILE doesn't exist"
    esit 1
  fi

  # No reuse for non zero off timer nodes
  if [ $off_timer -ne 0 ];then
    reuse=0
  fi
 
  # check variables
  for v in "${params_no_empty[@]}";do
    if [ -z "$(eval "echo \$$v")" ];then
      echo "$v must not be empty"
      exit 1
    fi
  done

  if [ ${#core[@]} -gt ${#max[@]} ];then
    echo "core and max have different number of definitions"
    exit 1
  fi
  if [ ${#core[@]} -gt ${#mem[@]} ];then
    echo "core and memory have different number of definitions"
    exit 1
  fi
  if [ ${#core[@]} -gt ${#image[@]} ];then
    echo "core and image have different number of definitions"
    exit 1
  fi

  if [ $is_updated -eq 1 ];then
    show_setup
  else
    return
  fi

  # Set head information, and make startup script
  if [ "$head_info" = "hostname" ];then
    head=${HOSTNAME}
  elif [ "$head_info" = "ip" ];then
    head=$(hostname -i)
  elif [ "$head_info" = "gcp" ];then
    head=${HOSTNAME}
    #instances=($(gcloud compute instances list |grep "^$HOSTNAME "))
    #head=${instances[((${#instances[@]}-2))]}
  else
    head=$head_info
  fi
  domain=$(hostname -d)
  make_startup

  # make prefix for each core
  prefix_core=()
  for((i=0;i<${#core[@]};i++));do
    prefix_core[$i]=${prefix}-${core[$i]}core
  done

  # Fix bucket
  if [[ ! $bucket =~ gs://* ]];then
    bucket="gs://$bucket"
  fi

  # Set gcloud options
  option=""
  filter=""
  zone=""
  #if [ -n "$image" ];then
  #  option="${option} --image $image"
  #fi
  if [ "$preemptible" -eq 1 ];then
    option="${option} --preemptible"
  fi
  if [ -n "$zones" ];then
    filter="--filter=\"zone:($(echo $zones|tr , ' '))\""
    zone="--zone=$(echo $zones|tr , ' '|cut -d' ' -f1)"
    option="${option} ${zone}"
  fi
  if [ -n "$tag" ];then
    option="${option} --tags=$tag"
  fi
}

read_config

# pool_password management
if [ -n "$pool_password" ];then
  if ! gsutil ls | grep "${bucket}$" >/dev/null;then
    z=${zone#*=}
    z=${z%-*}
    echo $ gsutil mb -c coldline -l $z $bucket
    gsutil mb -c coldline -l $z $bucket
    ret=$?
    if [ $ret -ne 0 ];then
      exit $ret
    fi
  fi
  echo $ gsutil cp "$pool_password" "${bucket}"
  gsutil cp "$pool_password" "${bucket}"
  ret=$?
  exit $ret
fi

# Functions: Update worker node information
update_wns () {
  # update condor configuration for worker nodes
  names=()
  ips=()

  # Get running instances
  while read line;do
    instance=($line)
    name=${instance[0]}
    state=${instance[((${#instance[@]}-1))]}
    if [ "$head_info" = "gcp" ];then
      ip=${instance[((${#instance[@]}-3))]}
    else
      ip=${instance[((${#instance[@]}-2))]}
    fi
    if [ "$state" == "RUNNING" ];then
      names=(${names[@]} ${name})
      ips=(${ips[@]} ${ip})
    fi
  done < <(eval gcloud compute instances list $filter|grep "^$prefix")

  # Check instance which is not running, but in condor_status (should be in the list until it is removed from the status)
  local in_status=($(condor_status -autoformat Name|cut -d"." -f1))
  touch "$WN_LIST"
  for wn in "${in_status[@]}";do
    if ! echo " ${names[*]} "|grep -q " $wn ";then
      ip=$(grep "$wn" "$WN_LIST"|cut -d" " -f2)
      if [ -n "$ip" ];then
        names=("${names[@]}" "${wn}")
        ips=("${ips[@]}" "${ip}")
      else
        date
        echo "WARNIING: $wn is listed in the status, but not listed in $WN_LIST nor gcp pool"
      fi
    fi
  done

  # Make wn list
  n=0
  wns=""
  : > "$WN_LIST"
  while [ $n -lt ${#names[@]} ];do
    wns="$wns condor@\$(UID_DOMAIN)/${ips[$n]} condor_pool@\$(UID_DOMAIN)/${ips[$n]}"
    echo "${names[$n]} ${ips[$n]}" >> "$WN_LIST"
    ((n++))
  done

  # Update config for collector
  #date
  #echo $ condor_config_val -collector -set "WNS = $wns"
  condor_config_val -collector -set "WNS = $wns" >/dev/null #echo $condor_reconfig -collector
  condor_reconfig -collector >/dev/null
}

update_wns

# Functions: Clean up worker nodes
clean_wns () {
  # Delete instances not in condor_status, which were removed by condor_off
  local in_status="$(condor_status -autoformat Name|cut -d"." -f1)"
  local is_deleted=0
  while read -r line;do
    instance=($line)
    name=${instance[0]}
    if [[ "$in_status" != *${name}* ]];then
      date
      echo "$ gcloud compute instances delete ${name} $zone"
      echo y|gcloud compute instances delete "${name}" "$zone"
      echo ""
      is_deleted=1
    fi
  done < <(eval gcloud compute instances list $filter|grep "^$prefix")
  if [ $is_deleted -eq 1 ];then
    update_wns
  fi
}

# Main loop
first=1
while :;do
  if [ $first -eq 0 ];then
    read_config
  fi
  first=0

  # Cleanup worker nodes
  clean_wns

  # Check instances
  all=()
  terminated=()
  if [[ $max_cores -ne 0 ]];then
    total_cores=0
  fi
  while read -r line;do
    instance=($line)
    name=${instance[0]}
    state=${instance[((${#instance[@]}-1))]}
    add=0
    if [ "$state" == "TERMINATED" ];then
      if [ $reuse -eq 1 ];then
        add=1
        terminated=("${terminated[@]}" "${name}")
      else
        date
        echo "$ gcloud compute instances delete ${name} $zone"
        echo y|gcloud compute instances delete "${name}" "$zone"
        echo ""
        # Update worker node information
        update_wns
      fi
    elif [ "$state" == "RUNNING" ];then
      add=1
    fi
    if [ $add -eq 1 ];then
      all=("${all[@]}" "${name}")
      if [[ $max_cores -ne 0 ]];then
        for p in "${prefix_core[@]}";do
          if [[ "$name" == ${p}* ]];then
            n_core=${p#${prefix}-}
            n_core=${n_core%core}
            total_cores=$((total_cores+n_core))
          fi
        done
      fi
    fi
  done < <(eval gcloud compute instances list $filter|grep "^$prefix")

  for((i=0;i<${#core[@]};i++));do
    machines="$(condor_status -autoformat Name State|grep "${prefix_core[$i]}")"
    n_machines=$(echo "$machines"|wc -l)
    n_unclaimed=$(echo "$machines"|grep -c " Unclaimed")

    if [[ $n_unclaimed -eq 0 && $((total_cores+${core[$i]})) -le $max_cores && $n_machines -lt ${max[$i]} ]];then
      # start/create instance
      instance_name=""
      for instance in "${terminated[@]}";do
        if [[ $instance == ${prefix_core[$i]}* ]];then
          instance_name=$instance
          date
          echo "$ gcloud compute start $instance_name"
          gcloud compute start "$instance_name"
          echo ""
        fi
      done
      if [ -z "$instance_name" ];then
        n=1
        while [ $n -lt 10000 ];do
          instance_name=${prefix_core[$i]}-$(printf "%04d" $n)
          if ! echo "${all[*]}"|grep -q "$instance_name";then
            date
            echo "$ gcloud compute instances create $instance_name --metadata-from-file startup-script=${STARTUP_PREFIX}-${core[$i]}core.sh $option --image ${image[$i]}"
            gcloud compute instances create $instance_name --metadata-from-file startup-script="${STARTUP_PREFIX}-${core[$i]}core.sh" $option --image ${image[$i]}
            echo ""
            break
          fi
          instance_name=""
          ((n++))
        done
      fi
      if [ -n "$instance_name" ];then
        # Update worker node information
        update_wns

        # Check new instance in the pool
        try=0
        while :;do
          if condor_status |grep -q "$instance_name" ;then
            date
            echo "$instance_name is added in the pool"
            echo
            if [[ $max_cores -ne 0 ]];then
              total_cores=$((total_cores+${core[$i]}))
            fi
            break
          fi
          ((try++))
          if [ $try -gt 100 ];then
            date
            echo "WARNING: $instance_name is still not available in the condor pool."
            echo "WARNING: Please check $instance_name status"
            break
          fi
          sleep 1
        done
      fi
    fi
  done
  sleep $interval
done
