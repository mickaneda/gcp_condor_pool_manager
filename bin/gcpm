#!/usr/bin/env bash

# Config file
CONFIG_DIR="${HOME}/.config/gcp_condor_pool_manager"
CONFIG_FILE="${CONFIG_DIR}/config"
WN_LIST="${CONFIG_DIR}/wn_list"
STARTUP="${CONFIG_DIR}/startup.sh"

# Default parameters
max=0
prefix=""
core=1
mem=3000
image=""
preemptible=0
zones=""
tag=""
reuse=0
interval=10
head_info=hostname
bucket=""
admin=""
owner=""
params=(max prefix core mem image preemptible zones tag reus interval head_info bucket admin owner)

# Other variables
pool_password=""

# HELP
HELP=$(cat << EOF
Usage: gcpm [-h] [-f <config file>] [-p <pool_passwrd file>] 
   -p  Pool file management
   -f  Set config file
   -h  print this help
EOF
)

# Check arguments
while [ $# -gt 0 ];do
  if [ "$1" = "-h" ];then
    echo "$HELP"
    exit
  elif [ "$1" = "-f" ];then
    shift
    CONFIG_FILE="$1"
    shit
  elif [ "$1" = "-p" ];then
    shift
    pool_password="$1"
    if [ -z "$pool_password" ];then
      echo "pool_password file is empty"
      exit 1
    fi
    shift
  else
    echo "Unknown arguments: $*"
    echo ""
    echo "$HELP"
    exit 1
  fi
done

# Check gcloud utils
if ! type gcloud >& /dev/null;then
  echo "gcloud tools are not installed, do you want to install?"
  while : ;do
    echo "$message [y/n]: " >/dev/tty
    read -srn 1 ans </dev/tty
    if [ "$ans" = "y" ];then
      curl https://sdk.cloud.google.com | bash
      break
    elif [ "$_s_read" = "n" ];then
      echo "Intall gcloud: https://cloud.google.com/sdk/install"
      exit 1
    fi
  done
fi

# Functions: Show setup
show_setup () {
  echo ""
  echo "=========================="
  echo "$(date): parameters updated"
  for p in ${params[@]};do
    eval "echo \$p = \$$p"
  done
  echo "=========================="
  echo ""
}

# Functions: Read config function
check_var () {
  local name="$1"
  local var="$2"
  local is_num="${3:-0}"
  local no_empty="${4:-0}"
  if [ "$var" = "$(eval "echo \$$name")" ];then
    return 0
  fi

  if [ $is_num -eq 1 ];then
    if ! expr $var + 1 >/dev/null 2>&1;then
      echo "ERROR: $var must be number, $var is not allowed. Check your configuration file."
      exit 1
    fi
  fi

  if [ $no_empty -eq 1 ];then
    if [ -z "$var" ];then
      echo "ERROR: $var must not be empty. Check your configuration file."
      exit 1
    fi
  fi

  eval "$name=$var"
  is_updated=1

  return 0
}

read_config () {
  if [ -f "$CONFIG_FILE" ];then
    is_updated=0
    local name
    local var
    while read name var;do
      if [ "$name" = "max" ];then
        check_var max "$var" 1 1
      elif [ "$name" = "prefix" ];then
        check_var prefix "$var" 0 1
      elif [ "$name" = "core" ];then
        check_var core "$var" 1 1
      elif [ "$name" = "mem" ];then
        check_var mem "$var" 1 1
      elif [ "$name" = "image" ];then
        check_var image "$var" 0 1
      elif [ "$name" = "preemptible" ];then
        check_var preemptible "$var" 1 1
      elif [ "$name" = "zones" ];then
        check_var zones "$var" 0 0
        zones=$(echo $var|tr , ' ')
      elif [ "$name" = "tag" ];then
        check_var tag "$var" 0 0
      elif [ "$name" = "reuse" ];then
        check_var reuse "$var" 1 1
      elif [ "$name" = "interval" ];then
        check_var name "$var" 1 1
      elif [ "$name" = "head_info" ];then
        check_var head_info "$var" 0 1
      elif [ "$name" = "bucket" ];then
        check_var bucket "$var" 0 1
      elif [ "$name" = "admin" ];then
        check_var admin "$var" 0 1
      elif [ "$name" = "owner" ];then
        check_var owner "$var" 0 1
      fi
    done < "$CONFIG_FILE"
    if [ $is_updated -eq 1 ];then
      show_setup
    fi
  fi

  # Fix bucket
  if [[ ! $bucket =~ gs://* ]];then
    bucket="gs://$bucket"
  fi

  # Set gcloud options
  option=""
  filter=""
  zone=""
  if [ -n "$image" ];then
    option="${option} --image $image"
  fi
  if [ "$preemptible" -eq 1 ];then
    option="${option} --preemptible"
  fi
  if [ -n "$zones" ];then
    filter="--filter=\"zone:($(echo $zones|tr , ' '))\""
    zone="--zone=$(echo $zones|tr , ' '|cut -d' ' -f1)"
    option="${option} ${zone}"
  fi
  if [ -n "$tag" ];then
    options="${option} --tags=$tag"
  fi
}

read_config

# pool_password management
if [ -n "$pool_password" ];then
  if ! gsutil ls | grep "${bucket}$" >/dev/null;then
    z=${zone#*=}
    z=${z%-*}
    echo $ gsutil mb -c coldline -l $z $bucket
    gsutil mb -c coldline -l $z $bucket
    ret=$?
    if [ $ret -ne 0 ];then
      exit $ret
    fi
  fi
  echo $ gsutil cp "$pool_password" "${bucket}"
  gsutil cp "$pool_password" "${bucket}"
  ret=$?
  exit $ret
fi

# Check parameters

if [ "$max" -eq 0 ];then
  echo "ERROR: set non-zero max"
  exit 1
fi

if [ -z "$prefix" ];then
  echo "ERROR: set prefix"
  exit 2
fi

# Functions: Update worker node information
update_wns () {
  # update condor configuration for worker nodes
  names=()
  ips=()

  # Get running instances
  while read line;do
    instance=($line)
    name=${instance[0]}
    state=${instance[((${#instance[@]}-1))]}
    if [ "$head_info" = "gcp" ];then
      ip=${instance[((${#instance[@]}-3))]}
    else
      ip=${instance[((${#instance[@]}-2))]}
    fi
    if [ "$state" == "RUNNING" ];then
      names=(${names[@]} ${name})
      ips=(${ips[@]} ${ip})
    fi
  done < <(eval gcloud compute instances list $filter|grep "^$prefix")

  # Check instance which is not running, but in condor_status (should be in the list until it is removed from the status)
  in_status=($(condor_status -format "%s\n" Name|grep "slot1@${prefix}"|cut -d"@" -f2|cut -d"." -f1))
  touch "$WN_LIST"
  for wn in ${in_status[@]};do
    if ! echo ${names[@]}|grep -q $wn;then
      ip=$(grep $wn "$WN_LIST"|cut -d" " -f2)
      names=(${names[@]} ${wn})
      ips=(${ips[@]} ${ip})
    fi
  done

  # Make wn list
  n=0
  wns=""
  : > "$WN_LIST"
  while [ $n -lt ${#names[@]} ];do
    wns="$wns condor@\$(UID_DOMAIN)/${ips[$n]} condor_pool@\$(UID_DOMAIN)/${ips[$n]}"
    echo "${names[$n]} ${ips[$n]}" >> "$WN_LIST"
    ((n++))
  done

  # Update config for collector
  condor_config_val -collector -set "WNS = $wns"
  condor_reconfig -collector
}

update_wns

# Make startup script

if [ "$head_info" = "hostname" ];then
  head=${HOSTNAME}
elif [ "$head_info" = "ip" ];then
  head=$(hostname -i)
elif [ "$head_info" = "gcp" ];then
  head=${HOSTNAME}
  #instances=($(gcloud compute instances list |grep "^$HOSTNAME "))
  #head=${instances[((${#instances[@]}-2))]}
else
  head=$head_info
fi
domain=$(hostname -d)

cat << EOF > "${STARTUP}"
#/bin/bash
sed -i"" 's/FIXME_ADMIN/${admin}/' /etc/condor/config.d/00_config_local.config

sed -i"" 's/FIXME_HOST/${head}/' /etc/condor/config.d/10_security.config
sed -i"" 's/FIXME_DOMAIN/${domain}/' /etc/condor/config.d/10_security.config

sed -i"" 's/FIXME_OWNER/${owner}/' /etc/condor/config.d/20_workernode.config
sed -i"" 's/FIXME_CORE/${core}/' /etc/condor/config.d/20_workernode.config
sed -i"" 's/FIXME_MEM/${mem}/' /etc/condor/config.d/20_workernode.config

gsutil cp "${bucket}/pool_password" /etc/condor/
chmod 600 /etc/condor/pool_password
systemctl enable condor
systemctl start condor
while :;do
  condor_reconfig
  status="\$(condor_status | grep "\${HOSTNAME}")"
  if [ -n "\$status" ];then
    break
  fi
  sleep 10
done
EOF

# Main loop
first=1
while :;do
  if [ $first -eq 0 ];then  
    read_config
  fi
  first=0

  # Check instances
  all=()
  terminated=()
  while read line;do
    instance=($line)
    name=${instance[0]}
    state=${instance[((${#instance[@]}-1))]}
    if [ "$state" == "TERMINATED" ];then
      if [ $reuse -eq 1 ];then
        all=(${all[@]} ${name})
        terminated=(${terminated[@]} ${name})
      else
        echo "$ gcloud compute instances delete ${name} $zone"
        gcloud compute instances delete ${name} $zone
        echo ""
        # Update worker node information
        update_wns
      fi
    elif [ "$state" == "RUNNING" ];then
      all=(${all[@]} ${name})
    fi
  done < <(eval gcloud compute instances list $filter|grep "^$prefix")

  # Check condor status
  # 0: "Total", 1: Machines, 2: Owner, 3: Claimed, 4: Unclaimed, 5: Matched, 6: Preempting, 7: Drain
  #total=($(condor_status -format "%s\n" Name|grep "slot1@${prefix}"|wc -l))
  total=($(condor_status -total |grep Total))
  if [ -z "${total[0]}" ] || ( [ ${total[1]} -lt $max ] && [ ${total[4]} -eq 0 ] );then

    # start/create instance
    instance_name=""
    if [ ${#terminated[@]} -gt 0 ];then
      instance_name=${terminated[0]}
      echo "$ gcloud compute start $instance_name $option"
      gcloud compute start $instance_name $option
      echo ""
    else
      n=1
      while [ $n -lt 10000 ];do
        instance_name=${prefix}-$(printf "%04d" $n)
        if ! echo ${all[*]}|grep -q $instance_name;then
          echo "$ gcloud compute instances create $instance_name --metadata-from-file startup-script=$STARTUP $option" 
          gcloud compute instances create $instance_name --metadata-from-file startup-script="${STARTUP}" $option
          echo ""
          break
        fi
        instance_name=""
        ((n++))
      done
    fi
    if [ -n "$instance_name" ];then
      # Update worker node information
      update_wns
      
      # Check new instance in the pool
      try=0
      while [ -z "$(condor_status |grep $instance_name)" ];do
        ((try++))
        if [ $try -gt 100 ];then
          echo "WARNING: $instance_name is still not available in the condor pool."
          echo "WARNING: Please check $instance_name status"
          break
        fi
        sleep 1
      done
    fi
  fi

  sleep $interval
done
